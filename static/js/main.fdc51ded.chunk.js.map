{"version":3,"sources":["components/ContactsForms/ContactsForm.module.scss","redux/contacts-selectors.js","redux/contacts-actions.js","components/ContactsForms/ContactsForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","components/Container/Container.jsx","redux/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","name","includes","addContact","createAction","number","payload","id","shortid","generate","removeContact","changeFilter","ContactsForms","onSubmit","useState","setName","setNumber","dispatch","useDispatch","useSelector","handleChange","event","target","value","onReset","className","s","panel__container","form__item","e","preventDefault","toast","info","find","contact","error","contactsActions","input__item","type","placeholder","onChange","button__submit","Filter","filter__item","contactActions","ContactList","length","map","onClick","onRemoveContact","App","data","console","log","position","autoClose","Container","children","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.fdc51ded.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ContactsForm_Container__1dhkF\",\"panel__container\":\"ContactsForm_panel__container__3g1fS\",\"form__item\":\"ContactsForm_form__item__MrJE0\",\"filter__item\":\"ContactsForm_filter__item__TD8lh\",\"input__item\":\"ContactsForm_input__item__1q26m\",\"button__submit\":\"ContactsForm_button__submit__1vcLm\",\"contact__list\":\"ContactsForm_contact__list__3rhrb\",\"contact__item\":\"ContactsForm_contact__item__2wzlo\"};","export const getContacts = (state) => state.contacts.items;\nexport const getFilter = (state) => state.contacts.filter;\n\nexport const getVisibleContacts = (state) => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import shortid from 'shortid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', (name, number) => ({\n  payload: {\n    id: shortid.generate(),\n    name,\n    number,\n  },\n}));\n\nconst removeContact = createAction('contacts/remove');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport default { addContact, removeContact, changeFilter };\n","import s from './ContactsForm.module.scss';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { getContacts } from '../../redux/contacts-selectors';\n\nimport contactsActions from '../../redux/contacts-actions';\n\nexport default function ContactsForms({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (name === '') {\n      return toast.info('Please input name');\n    }\n\n    // check unique contact name\n    if (contacts.find((contact) => contact.name === name)) {\n      return toast.error(`${name} is already in contacts`);\n    }\n\n    dispatch(contactsActions.addContact(name, number));\n    onSubmit(name, number);\n    onReset();\n  };\n\n  const onReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={s.panel__container}>\n      <h1>Phonebook</h1>\n      <form className={s.form__item} onSubmit={handleSubmit}>\n        <h2>Add a new contact</h2>\n        <label>\n          Name\n          <input\n            className={s.input__item}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"enter contact name\"\n            onChange={handleChange}\n          ></input>\n        </label>\n        <label>\n          Pnone number\n          <input\n            className={s.input__item}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            placeholder=\"enter phone number\"\n            onChange={handleChange}\n          ></input>\n        </label>\n        <button className={s.button__submit} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n}\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onSubmit: (name, number) =>\n//     dispatch(contactsActions.addContact(name, number)),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactsForms);\n","// import PropTypes from 'prop-types';\nimport contactActions from '../../redux/contacts-actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts-selectors';\nimport s from '../ContactsForms/ContactsForm.module.scss';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <label>\n        <h1>Find contacts by name</h1>\n        <input\n          className={s.filter__item}\n          type=\"text\"\n          value={value}\n          onChange={(event) =>\n            dispatch(contactActions.changeFilter(event.target.value))\n          }\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default Filter;\n\n// Filter.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   filter: PropTypes.string,\n// };\n\n// const mapStateToProps = (state) => ({\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onChange: (event) =>\n//     dispatch(contactActions.changeFilter(event.target.value)),\n// });\n","import s from '../ContactsForms/ContactsForm.module.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport contactsActions from '../../redux/contacts-actions';\nimport { getVisibleContacts } from '../../redux/contacts-selectors';\nimport Filter from '../Filter/Filter';\n\n// список добавленных контактов и удаление при клике на кнопку\nconst ContactList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onRemoveContact = (id) => dispatch(contactsActions.removeContact(id));\n\n  if (contacts.length === 0) return null;\n\n  return (\n    <div className={s.panel__container}>\n      <Filter />\n      <ul className={s.form__item}>\n        {contacts.map(({ id, name, number }) => (\n          <li key={id} className={s.input__item}>\n            <span>\n              {name}: {number}\n            </span>\n\n            <button\n              className={s.button__submit}\n              onClick={() => onRemoveContact(id)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter)\n//   );\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getVisibleContacts(items, filter),\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onRemoveContact: (id) => dispatch(contactsActions.removeContact(id)),\n// });\n","import ContactsForms from './components/ContactsForms/ContactsForm';\n\nimport ContactList from './components/ContactList/ContactList';\n\nimport { ToastContainer } from 'react-toastify';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function App() {\n  const formSubmitHandler = (data) => {\n    console.log(data);\n  };\n\n  return (\n    <>\n      <ContactsForms onSubmit={formSubmitHandler} />\n      <ToastContainer position=\"top-center\" autoClose={2000} />\n      <ContactList />\n    </>\n  );\n}\n","import React from 'react';\nimport s from '../ContactsForms/ContactsForm.module.scss';\n\nconst Container = ({ children }) => (\n  <div className={s.Container}>{children}</div>\n);\n\nexport default Container;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\n\n// items reducer\nconst items = createReducer([], {\n  [actions.addContact]: (contacts, { payload }) => [...contacts, payload],\n  [actions.removeContact]: (contacts, { payload }) =>\n    contacts.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\n// import { composeWithDevTools } from 'redux-devtools-extension'; - при установке пакета @reduxjs/toolkit' DevTools больше не нужны\n// из package.json тоже удалила\nimport contactsReducer from './contacts-reducer';\nimport storage from 'redux-persist/lib/storage';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// обертка\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Container from './components/Container/Container';\nimport { store, persistor } from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Container>\n          <App />\n        </Container>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}